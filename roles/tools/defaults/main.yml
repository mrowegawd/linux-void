---
tmux_version: "3.2a"
newsboat_version: "2.25"
torrent_version: "3.00"
telegram_version: "tsetup.3.3.0"

# note: Dont forget to check this
# - check pkg_name
# - check url download
# - check after_extract_filename, dia tergantung download url nya
# - check cmd check version
# - check cmd make

install_tools_from_buildsource:
  - pkg_name: "tmux"
    pkg_version: "{{ tmux_version }}"
    pkg_deps: "{{ __tmux_deps }}"
    pkg_cmd_check_version: |
      bash -lc 'if command -v tmux &> /dev/null;
      then tmux -V ; else echo "not found"; fi'
    pkg_url_download:
      - url: "https://github.com/tmux/tmux/releases/download/{{ tmux_version }}/tmux-{{ tmux_version }}.tar.gz"
        tar_file: "tmux-{{ tmux_version }}.tar.gz"
        after_extract_filename: "tmux-{{ tmux_version }}"
        dest_temp_dir: "{{ temp_dir }}/tmux"
    pkg_cmd_make: |
      ./configure && make && make install

  - pkg_name: "newsboat"
    pkg_version: "{{ newsboat_version }}"
    pkg_deps: "{{ __newsboat_deps }}"
    pkg_cmd_check_version: |
      bash -lc 'if command -v newsboat &> /dev/null;
      then newsboat --version; else echo "not found"; fi'
    pkg_url_download:
      - url: "https://github.com/newsboat/newsboat/archive/refs/tags/r{{newsboat_version}}.tar.gz"
        tar_file: "newsboat-r{{ newsboat_version }}.tar.gz"
        after_extract_filename: "newsboat-r{{ newsboat_version }}"
        dest_temp_dir: "{{ temp_dir }}/newsboat"
    pkg_cmd_make: |
      make && make install

  - pkg_name: "torrent"
    pkg_version: "{{ torrent_version }}"
    pkg_deps: "{{ __torrent_deps }}"
    pkg_cmd_check_version: |
      bash -lc 'if command -v transmission-daemon &> /dev/null;
      then transmission-daemon --V | grep {{torrent_version }} | cut -d" " -f2; else echo "not found"; fi'
    pkg_url_download:
      - url: "https://github.com/transmission/transmission/releases/download/3.00/transmission-{{ torrent_version }}.tar.xz"
        tar_file: "transmission-{{ torrent_version }}.tar.xz"
        after_extract_filename: "transmission-{{ torrent_version }}"
        dest_temp_dir: "{{ temp_dir }}/torrent"
    pkg_cmd_make: |
      ./configure -q && make -s && sudo make install

  # - pkg_name: "telegram"
  #   pkg_version: "{{ telegram_version }}"
  #   pkg_deps: "{{ __telegram_deps }}"
  #   pkg_cmd_check_version: |
  #     bash -lc 'if command -v telegram &> /dev/null;
  #     then echo "found"; else echo "not found"; fi'
  #   pkg_url_download:
  #     - url: "https://telegram.org/dl/desktop/linux/{{ telegram_version }}.tar.xz"
  #       tar_file: "{{ telegram_version }}.tar.xz"
  #       after_extract_filename: "{{ telegram_version }}"
  #       dest_temp_dir: "{{ temp_dir }}/telegram"
  #   pkg_cmd_make: |
  #     tar -xf tsetup.*.*.*.tar.xz && mv Telegram /opt

# pip install
install_tools_from_asdf:
  - pkg_name: "python"
    pkg_install_with: "asdf"
    # harus string (not |), karena bakal di concat dngan pkg_lists
    pkg_shell_install: "pip install -U"
    pkg_lists:
      - yt-dlp # youtube-dl are dead now

  - pkg_name: "ruby"
    pkg_install_with: "asdf"
    pkg_shell_install: "gem install"
    pkg_lists:
      - lolcat
  - pkg_name: "golang"
    pkg_install_with: "asdf"
    pkg_shell_install: "go get -u"
    pkg_lists:
      - "mvdan.cc/sh/cmd/shfmt"
      # - "github.com/jesseduffield/lazydocker"
      # - "github.com/jesseduffield/lazygit"
      - "github.com/shurcooL/markdownfmt" # markdownfmt for vim
  - pkg_name: "rust"
    pkg_install_with: "asdf"
    pkg_shell_install: "cargo install"
    pkg_lists:
      - ripgrep
      - exa
      # fd find
      - fd-find
      # alternative cat command
      - "--locked bat"
      # for git
      - git-delta
  - pkg_name: "nodejs"
    pkg_install_with: "asdf"
    pkg_shell_install: "npm install -g"
    pkg_lists:
      # https://github.com/tldr-pages/tldr
      - tldr
      # Make any web page a desktop application
      - nativefier
  - pkg_name: "apt"
    pkg_install_with: "apt"
    pkg_shell_install: ""
    pkg_lists:
      - shellcheck
      # for plantuml dependencies
      - graphviz

#>vscode.yml ==================================================================
# Visual Studio Code version number (defaults to the latest version)
visual_studio_code_version: ""
# Build (either 'stable' or 'insiders') https://code.visualstudio.com/insiders/
# Ubuntu only (code-insiders isn't in Microsoft's RPM repo)
visual_studio_code_build: stable
vscode_apt_key:
  url: "https://packages.microsoft.com/keys/microsoft.asc"
  id: ""

vscode_apt_repo:
  file: vscode
  repo: |
    deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main

# # The package name to install
visual_studio_code_package: "{{ (visual_studio_code_build == 'insiders') | ternary('code-insiders', 'code') }}"

#>alacritty.yml ===============================================================
alacritty_url_download: https://api.github.com/repos/alacritty/alacritty/releases/latest

#>mpv.yml =====================================================================
mpv_version: "0.34.0"
mpv_build:
  - repo: https://github.com/mpv-player/mpv-build.git
    dest: "{{ temp_dir }}/mpv_build"

# autoenv.yml =====================================================================
autoenv_git:
  - repo: "https://github.com/kennethreitz/autoenv.git"
    version: "master"

# fzf.yml =====================================================================
fzf_repo:
  - name: ".fzf"
    repo: "https://github.com/junegunn/fzf.git"
    version: master

# zsh.yml =====================================================================
zsh_version: 5.8
zsh_plugins:
  # - repo: 'https://github.com/zplug/zplug'
  #   dest: '.zplug'
  - repo: "git://github.com/robbyrussell/oh-my-zsh.git"
    dest: ".oh-my-zsh"
  - repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
    dest: ".cache/zsh/plugins/zsh-syntax-highlighting"
  - repo: "https://github.com/urbainvaes/fzf-marks.git"
    dest: ".cache/zsh/plugins/fzf-marks"
