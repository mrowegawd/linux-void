---
- name: BUILD-SOURCE-WITH-GIT | Check command pkg before continue
  ansible.builtin.shell: |
    {{ item.pkg_cmd_check_version }}
  args:
    executable: /bin/bash
  changed_when: false
  register: check_pkg_command
  loop: "{{ install_with_git }}"

- name: BUILD-SOURCE-WITH-GIT | Setting Debian Facts
  ansible.builtin.set_fact:
    current_stdout: "{{ item.stdout }}"
  with_items: "{{ check_pkg_command.results }}"

# - name: BUILD-SOURCE-WITH-GIT | Debug version pkg
#   ansible.builtin.debug:
#     msg: "{{ current_stdout.find(item.pkg_version) }}"
#   loop: "{{ install_with_git }}"

# - name: BUILD-SOURCE-WITH-GIT | Remove old dep pkgs
#   ansible.builtin.apt:
#     name: "{{ item.pkg_name }}"
#     state: absent
#   loop: "{{ install_with_git }}"
#   when: current_stdout.find(item.pkg_version) == -1

- name: BUILD-SOURCE-WITH-GIT | Install deps
  ansible.builtin.include_role:
    name: _0package
  vars:
    _apt_packages: "{{ item.pkg_deps }}"
  loop: "{{ install_with_git }}"
  when: current_stdout.find(item.pkg_version) == -1

- name: BUILD-SOURCE-WITH-GIT | Ensure path temp dir exists
  ansible.builtin.file:
    path: "{{ item.pkg_url_download.0.dest_temp_dir }}"
    mode: 0755
    state: directory
  loop: "{{ install_with_git }}"
  when: current_stdout.find(item.pkg_version) == -1

- name: BUILD-SOURCE-WITH-GIT | Git clone
  ansible.builtin.git:
    repo: "{{ item.pkg_url_download.0.repo }}"
    dest: "{{ item.pkg_url_download.0.dest_temp_dir }}"
    version: "{{ item.pkg_url_download.0.version | default('master') }}"
  loop: "{{ install_with_git }}"
  when: current_stdout.find(item.pkg_version) == -1

- name: BUILD-SOURCE-WITH-GIT | Run make install
  ansible.builtin.shell: |
    {{ item.pkg_cmd_make }}
  args:
    chdir: "{{ item.pkg_url_download.0.dest_temp_dir }}"
  changed_when: false
  loop: "{{ install_with_git }}"
  when: current_stdout.find(item.pkg_version) == -1
