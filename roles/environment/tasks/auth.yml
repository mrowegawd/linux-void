---
- name: AUTH | Set pam_faildelay configuration | Debian
  lineinfile:
    dest: /etc/pam.d/login
    regexp: '^(auth[\s]+optional[\s]+pam_faildelay.so).*$'
    line: '\1 delay={{ (auth_security_shadow_utils_fail_delay | int) * 10**6 }}'
    state: present
    backrefs: yes
  when:
    - auth_security_shadow_utils_fail_delay is defined
    - ansible_os_family | lower == 'debian'
  tags:
    - auth
    - medium

- name: AUTH | Prevent users with blank or null passwords from authenticating | Debian
  lineinfile:
    dest: "{{ __pam_auth_file }}"
    state: present
    regexp: "^(.*)nullok_secure(.*)$"
    line: '\1\2'
    backup: yes
    backrefs: yes
  when:
    - ansible_os_family | lower == 'debian'
    - auth_security_disallow_blank_password_login | bool
  tags:
    - auth

- name: AUTH | Prevent users with blank or null passwords from authenticating | Debian
  lineinfile:
    dest: "{{ __pam_auth_file }}"
    state: present
    regexp: "^({{ item }}.*sufficient.*)nullok(.*)$"
    line: '\1\2'
    backup: yes
    backrefs: yes
  with_items:
    - auth
    - password
  when:
    - ansible_os_family | lower == 'redhat'
    - auth_security_disallow_blank_password_login | bool
  tags:
    - auth
    - high

- name: AUTH | Lock accounts after three failed login attempts a 15 minute period | Redhat
  blockinfile:
    dest: "{{ __pam_password_file }}"
    state: present
    marker: "# {mark} MANAGED BY ANSIBLE-HARDENING"
    insertbefore: EOF
    block: "{{ lookup('template', 'pam_faillock.j2') }}"
  when:
    - ansible_pkg_mgr in ['yum', 'zypper']
    - auth_security_pam_faillock_enable | bool
  tags:
    - auth
    - medium

- name: AUTH | Check for 'nopasswd' in sudoers files
  shell: |
    grep -ir nopasswd /etc/sudoers /etc/sudoers.d/ | egrep -v "^([[:space:]]*)?(#|$)" || echo "not found"
  register: sudoers_nopasswd_check
  changed_when: False
  when:
    - auth_security_sudoers_nopasswd_check_enable | bool
  tags:
    - auth
    - medium
    - low

- name: AUTH | Users must provide a password for privilege escalation.
  debug:
    msg: |
      The 'NOPASSWD' directive was found in the sudoers configuration files.
      Remove the directive to ensure that all users must provide a password to
      run commands as the root user.

      {{ sudoers_nopasswd_check.stdout }}
  when:
    - sudoers_nopasswd_check is not skipped
    - sudoers_nopasswd_check.stdout != 'not found'
  tags:
    - auth
    - medium
    - low
    - skip_ansible_lint

- name: AUTH | Check for '!authenticate' in sudoers files
  shell: grep -ir '\!authenticate' /etc/sudoers /etc/sudoers.d/ || echo 'not found'
  register: sudoers_authenticate_check
  changed_when: False
  tags:
    - auth
    - medium

- name: AUTH | Users must re-authenticate for privilege escalation.
  debug:
    msg: >
      The '!authenticate' directive was found in the sudoers configuration
      files. Remove the directive to ensure that all users must provide a
      password to run commands as the root user each time they use sudo.
  when:
    - sudoers_authenticate_check is not skipped
    - sudoers_authenticate_check.stdout != 'not found'
  tags:
    - auth
    - medium
    - skip_ansible_lint

- name: AUTH | Check if sssd.conf exists
  stat:
    path: /etc/sssd/sssd.conf
  register: sssd_conf_check
  check_mode: False
  tags:
    - always

# NOTE(mhayden): Some systems, such as ARM, don't have grub at all. This task
# should be skipped on those systems.

- name: AUTH | Check if GRUB2 custom file exists
  stat:
    path: "{{ auth_grub_custom_file }}"
  register: grub_custom_file_check
  check_mode: False
  tags:
    - always

- name: AUTH | Set a GRUB 2 password for single-user/maintenance modes
  block:
    - name: AUTH | Set {{ auth_grub_custom_file }}
      blockinfile:
        path: "{{ auth_grub_custom_file }}"
        insertbefore: EOF
        marker: "# {mark} MANAGED BY ANSIBLE-HARDENING"
        block: |
          set superusers="root"
          password_pbkdf2 root {{ _auth_security_grub_password_hash }}
        state: present
      notify:
        - update grub config
      tags:
        - skip_ansible_lint

    - name: AUTH | Set {{ auth_grub_linux_file }}
      lineinfile:
        path: "{{ auth_grub_linux_file }}"
        regexp: "^CLASS=.*"
        line: 'CLASS="--class gnu-linux --class gnu --class os --unrestricted"'
        state: present
        backrefs: yes
      notify:
        - update grub config
      tags:
        - skip_ansible_lint
  when:
    - grub_custom_file_check.stat.exists | bool
    - auth_security_require_grub_authentication | bool
  tags:
    - auth
    - high

- name: AUTH | The operating system must limit the number of concurrent sessions to 10 for all accounts and/or account types.
  blockinfile:
    dest: /etc/security/limits.d/ansible-hardening-maxlogins.conf
    create: yes
    block: |
      # Deployed by the ansible-hardening role
      # V-72217 - Limit concurrent sessions for all accounts/types
      * hard maxlogins {{ security_concurrent_session_limit }}
  when:
    - auth_security_concurrent_session_limit is defined
  tags:
    - auth
    - low

- name: AUTH | Check for pam_lastlog in PAM configuration
  command: |
    grep pam_lastlog {{ __pam_postlogin_file }}
  register: pam_lastlog_check
  changed_when: False
  failed_when: False
  check_mode: False
  tags:
    - always

- name: AUTH | Display date/time of last logon after logon
  debug:
    msg: >
      The 'pam_lastlog' directive is missing in {{ __pam_postlogin_file }}.
  when:
    - pam_lastlog_check.rc != 0
  tags:
    - low
    - auth

- name: AUTH | Ensure .shosts find has finished
  async_status:
    jid: "{{ shosts_find.ansible_job_id }}"
  failed_when: False
  changed_when: False
  register: job_result
  until: job_result.finished | bool
  retries: 30
  when:
    - shosts_find is not skipped
  tags:
    - high
    - auth

- name: AUTH | Remove .shosts or shosts.equiv files
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ job_result.files }}"
  when:
    - job_result is not skipped
    - _run_auth_security_remove_shosts_files | bool
  tags:
    - high
    - auth
